// Generated by CoffeeScript 1.3.3
(function() {
  var Aloha, UI, freeze_gif, hideUI, scale, space;

  hideUI = function(action) {
    if (action) {
      $(".ui, .ui-icon, .uiHidden .ui-resizable-handle").hide();
      $(".masonry").css("margin-top", "0px");
      return $(".module").css("border", "none");
    } else {
      $(".ui, .ui-icon, .ui-resizable-handle").show();
      $(".masonry").css("margin-top", "40px");
      return $(".module").css("border", "1px solid lightgrey");
    }
  };

  freeze_gif = function(i, div, c) {
    var a, h, j, w;
    if (c === undefined) {
      c = document.createElement("canvas");
    }
    h = c.height = $(i.parentNode).height();
    w = c.width = i.width;
    c.getContext("2d").drawImage(i, 0, 0, w, h);
    $(c).show();
    try {
      return i.src = c.toDataURL("image/gif");
    } catch (e) {
      j = 0;
      a = void 0;
      while (a = i.attributes[j]) {
        if (a.name === "style") {
          c.setAttribute(a.name, a.value);
        }
        j++;
      }
      $(c).addClass("freeze");
      $(c).height("100%");
      $(i).addClass("play");
      $(i.parentNode).append(c);
      return $(i).hide();
    }
  };

  requirejs.config({
    baseUrl: "javascripts/lib/",
    paths: {
      app: "../app",
      _jquery: "require-jquery",
      backbone: "backbone-min",
      underscore: "underscore-min",
      icanHaz: "ICanHaz.min",
      jqueryui: "jquery-ui-1.8.19.custom.min",
      bootstrap: "bootstrap/js/bootstrap.min",
      masonry: "jquery.masonry.min",
      json2: "json2",
      fileupload: "file.upload",
      aloha: "aloha/lib/aloha-full",
      fileUploader: "file_uploader/fileuploader",
      drag: "jquery.drag"
    },
    shim: {
      bootstrap: {
        deps: ["jqueryui"],
        exports: "bootstrap"
      },
      underscore: {
        exports: "_"
      },
      backbone: {
        deps: ["underscore", "jquery"],
        exports: "Backbone"
      }
    }
  });

  UI = false;

  scale = void 0;

  space = void 0;

  if (window.Aloha === undefined || window.Aloha === null) {
    Aloha = window.Aloha = {};
  }

  define("core", ["jquery", "drag", "masonry", "jqueryui", "bootstrap"], function($) {
    return $;
  });

  Aloha.settings = {
    locale: "en",
    sidebar: {
      disabled: true
    },
    plugins: {
      load: "common/format, common/link, common/image",
      format: {
        config: ["b", "i", "p", "h1", "h2", "h3", "pre", "removeFormat"]
      }
    }
  };

  requirejs(["core", "app/views/mediaView"], function($, MediaView) {});

  requirejs(["core", "app/views/pageView"], function($, PageView) {
    var currentPage, myRoutes, router, vent, windowWidth;
    windowWidth = $("body").width();
    scale = windowWidth / 1600;
    vent = _.extend({}, Backbone.Events);
    currentPage = new PageView({
      vent: vent
    });
    myRoutes = Backbone.Router.extend({
      routes: {
        login: "login"
      },
      login: function() {
        $("#login").modal("show");
        return $("#login").on("hide", function() {
          return router.navigate();
        });
      }
    });
    router = new myRoutes();
    Backbone.history.start({
      pushState: true
    });
    return $(".ui, .ui-icon, .ui-resizable-handle").hide();
  });

}).call(this);
