// Generated by CoffeeScript 1.3.3
(function() {

  define(["backbone"], function(Backbone) {
    var ImageView;
    ImageView = Backbone.View.extend({
      tagName: "li",
      className: "imageBox",
      events: {
        click: "play",
        "click .deleteElement": "deleteImage",
        mouseenter: function() {
          if (!UI) {
            return;
          }
          return this.$el.find(".uiHidden").stop(true, true).fadeIn();
        },
        mouseleave: function() {
          return this.$el.find(".uiHidden").stop(true, true).fadeOut();
        }
      },
      play: function() {
        if (this.$el.find(".freeze").is(":hidden")) {
          return freeze_gif(this.$el.find(".play")[0], null, this.$el.find(".freeze")[0]);
        } else {
          this.$el.find(".freeze").toggle();
          return this.$el.find(".play").toggle();
        }
      },
      deleteImage: function() {
        var answer;
        answer = confirm("Are you shure you want to delete this image?");
        if (answer) {
          this.model.clear({
            silent: true
          });
          this.model.destroy();
          return this.$el.remove();
        }
      },
      render: function(margin) {
        var ratio, self;
        this.el.id = this.model.get("_id");
        this.$el.html(ich.imageTemp(this.model.toJSON()));
        self = this;
        if (this.model.get("size")) {
          this.$el.height(Math.round(this.model.get("size") * scale));
        } else {
          this.$el.height(Math.round(200 * scale));
        }
        if (margin) {
          this.$el.css("margin", margin);
        }
        ratio = this.model.get("width") / this.model.get("height");
        this.$el.find("img").hide();
        this.$el.find("img")[0].onload = function() {
          var aspect;
          $(this).show();
          aspect = $(this).width() / $(this).height();
          console.log($(this).width() + " " + aspect + " " + self.$el.height() * aspect);
          self.$el.width(self.$el.height() * aspect);
          if (loggedIn) {
            self.$el.resizable({
              aspectRatio: aspect,
              grid: [50 * aspect * scale, 50 * scale],
              create: function(event, ui) {},
              stop: function(event, ui) {
                self.model.set("size", Math.round(self.$el.height() / (scale * 50)) * 50);
                return $(this).parent().masonry("reload");
              }
            });
          }
          freeze_gif(this);
          if (UI === false) {
            hideUI(true);
          }
          self.$el.parent().masonry("reload");
          return setTimeout((function() {
            return self.$el.parent().masonry("reload");
          }), 2000);
        };
        return this.$el;
      },
      initialize: function() {
        _.bindAll(this, "render", "deleteImage");
        return this.model.bind("render", this.render);
      }
    });
    return ImageView;
  });

}).call(this);
