// Generated by CoffeeScript 1.3.3
(function() {

  define(["backbone", "ich"], function(Backbone, ich) {
    var MainView;
    MainView = Backbone.View.extend({
      el: $('body'),
      cloneSite: function() {
        var url,
          _this = this;
        url = $('#urlInput').val();
        return $(document).load("/grabsite", {
          url: url
        }).done(function(data) {
          var $data, $html, $scripts, html, nonscripts, scripts;
          $data = $(data[0]);
          $html = $data;
          nonscripts = $html.filter(function() {
            return !$(this).is("script");
          });
          scripts = $html.filter(function() {
            return $(this).is("script");
          });
          $data.each(function() {
            return $('body').append(this);
          });
          $html = $(data);
          html = data;
          $data = String(html).replace(/<\!DOCTYPE[^>]*>/i, "").replace(/<(script)([\s\>])/g, "<div class=\"document-$1\"$2").replace(/<\/(script)\>/g, "</div>");
          $data = $($data);
          $scripts = $data.find('.document-script');
          $scripts.each(function() {
            var $script;
            $script = $(this);
            if ($script.parent() !== $('head')) {
              return $script.detach();
            }
          });
          if ($scripts.length) {
            $scripts.detach();
          }
          $scripts.each(function() {
            var $script, contentNode, scriptNode, scriptText;
            $script = $(this);
            if ($script.parent() === $('head')) {
              scriptText = $script.html();
              scriptNode = document.createElement("script");
              contentNode = $($script.data('parent'));
              try {
                scriptNode.appendChild(document.createTextNode(scriptText));
                $('head').append(scriptNode);
              } catch (e) {
                scriptNode.text = scriptText;
                $('head').append(scriptNode);
              }
              if ($(this).attr("src") != null) {
                return scriptNode.setAttribute("src", $(this).attr("src"));
              }
            }
          });
          $("body").html($data);
          $scripts.each(function() {
            var $script, contentNode, scriptNode, scriptText;
            $script = $(this);
            if ($script.parent() === $('head')) {
              scriptText = $script.html();
              scriptNode = document.createElement("script");
              contentNode = $($script.data('parent'));
              try {
                scriptNode.appendChild(document.createTextNode(scriptText));
                $('head').append(scriptNode);
              } catch (e) {
                scriptNode.text = scriptText;
                $('head').append(scriptNode);
              }
              if ($(this).attr("src") != null) {
                return scriptNode.setAttribute("src", $(this).attr("src"));
              }
            }
          });
          return $("body").append(nonscripts).append(scripts);
        });
      },
      render: function() {
        ich.grabTemplates();
        return this.$el.html('').append(ich.inputTemp());
      },
      initialize: function() {
        _.bindAll(this, "render", "cloneSite");
        return this.render();
      }
    });
    return MainView;
  });

}).call(this);
